package main

import (
	"flag"
	"fmt"
	"os"
)

func printUsage() {
	fmt.Println("usage: ./png2prg [-help -h -d -q -v -bitpair-colors 0,6,14,3 -o outfile.prg -td testdata] FILE [FILE..]")
}

func printHelp() {
	printUsage()
	fmt.Println()
	fmt.Printf("# png2prg %v", version)
	fmt.Println()
	fmt.Println()
	fmt.Println("Png2prg converts a 320x200 image (png/gif/jpeg) to a c64 hires or multicolor")
	fmt.Println("bitmap or charset. It will find the best matching palette and backgroundcolor")
	fmt.Println("automatically, no need to modify your source images or configure a palette.")
	fmt.Println("Vice screenshots with default borders (384x272) are automatically cropped.")
	fmt.Println()
	fmt.Println("The resulting .prg includes the 2-byte start address and optional displayer.")
	fmt.Println()
	fmt.Println("This tool can be used in all buildchains on most platforms.")
	fmt.Println()
	fmt.Println("# Graphics Mode:")
	fmt.Println()
	fmt.Println("Png2prg is mostly able to autodetect the correct graphics mode, but you can")
	fmt.Println("also force a specific graphics mode with the -mode flag:")
	fmt.Println()
	fmt.Println("  ./png2prg -m koala image.png")
	fmt.Println()
	fmt.Println("koala/hires/sccharset/mccharset are the supported modes.")
	fmt.Println()
	fmt.Println("# Koala or Hires Bitmap:")
	fmt.Println()
	fmt.Println("Png2prg automatically detects hires bitmaps based on the maximum")
	fmt.Println("amount of colors per character in the bitmap.")
	fmt.Println()
	fmt.Println("  Bitmap: $2000 - $3f3f")
	fmt.Println("  Screen: $3f40 - $4327")
	fmt.Println("  D800:   $4328 - $470f (multicolor only)")
	fmt.Println("  D021:   $4710         (multicolor only)")
	fmt.Println()
	fmt.Println("# Bitpair Colors:")
	fmt.Println()
	fmt.Println("By default, png2prg guesses bitpair colors by itself. In most cases you")
	fmt.Println("don't need to configure anything, but you might in some cases.")
	fmt.Println("In most cases it will provide a normalized image which should yield")
	fmt.Println("good pack results, but your miles may vary.")
	fmt.Println()
	fmt.Println("To give you more control, you can force/prefer a specific bitpair")
	fmt.Println("color-order. Colors entered are c64 colors, so 0 for black, 1 for white,")
	fmt.Println("2 for red, etc.")
	fmt.Println()
	fmt.Println("The following example will force background color 0 and prefer")
	fmt.Println("colors 6,14,3 for bitpairs 01,10,11:")
	fmt.Println()
	fmt.Println("  ./png2prg -bitpair-colors 0,6,14,3 image.png")
	fmt.Println()
	fmt.Println("It's also possible to explicitely skip certain bitpairs with -1:")
	fmt.Println()
	fmt.Println("  ./png2prg -bitpair-colors 0,-1,-1,3 image.png")
	fmt.Println()
	fmt.Println("# Single or Multicolor Charset:")
	fmt.Println()
	fmt.Println("Currently only images with max 4 colors can be converted into a charset.")
	fmt.Println()
	fmt.Println("By default charsets are packed, they only contain unique characaters.")
	fmt.Println("If you do not want charpacking, eg for a 1x1 charset, please use -no-pack")
	fmt.Println()
	fmt.Println("  Charset:   $2000-$27ff")
	fmt.Println("  Screen:    $2800-$2be7")
	fmt.Println("  CharColor: $2be8       (multicolor only)")
	fmt.Println("  D021:      $2be9       (multicolor only)")
	fmt.Println("  D022:      $2bea       (multicolor only)")
	fmt.Println("  D023:      $2beb       (multicolor only)")
	fmt.Println()
	fmt.Println("# Animation (only koala bitmaps for now):")
	fmt.Println()
	fmt.Println("If multiple files are added, they are treated as animation frames.")
	fmt.Println("The base image will be exported and eache frame as a separate .prg,")
	fmt.Println("containing the modified characters.")
	fmt.Println()
	fmt.Println("The frame files are following this format.")
	fmt.Println("Each frame consists of 1 or more chunks. A chunk looks like this:")
	fmt.Println()
	fmt.Println("  .byte $03    // number of chars in this chunk")
	fmt.Println("               // $00 marks end of frame")
	fmt.Println("               // $ff marks end of all frames")
	fmt.Println("  .word bitmap // bitmap address of this chunk (the high byte is <$20)")
	fmt.Println("  .word screen // screenram address (the high byte is <$04)")
	fmt.Println()
	fmt.Println("  For each char in this chunk:")
	fmt.Println()
	fmt.Println("    .byte 0,31,15,7,8,34,0,128 // pixels")
	fmt.Println("    .byte $64                  // screenram colors")
	fmt.Println("    .byte $01                  // colorram color")
	fmt.Println("    ...                        // next char(s)")
	fmt.Println()
	fmt.Println("  ...          // next chunks")
	fmt.Println("  .byte 0      // end of frame")
	fmt.Println("  ...          // next frame(s)")
	fmt.Println("  .byte $ff    // end of all frames")
	fmt.Println()
	fmt.Println("# Options:")
	fmt.Println()
	flag.PrintDefaults()
	fmt.Println()
	os.Exit(0)
}
